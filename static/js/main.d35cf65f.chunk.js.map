{"version":3,"sources":["theme.js","OrderString.js","App.js","reportWebVitals.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","OrderString","useState","ordering","setOrder","currentSelected","setSelected","currentInput","setInput","Container","maxWidth","Grid","container","spacing","item","xs","TextField","label","value","onChange","event","target","multiline","rowsMax","InputProps","readOnly","variant","FormControlLabel","control","Radio","checked","Button","onClick","replace","stringsToChoose","trim","split","setOfStrings","Set","Array","from","sort","reverse","a","b","length","outputString","i","concat","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d35cf65f.chunk.js","sourcesContent":["import { red } from \"@material-ui/core/colors\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#556cd6\",\r\n    },\r\n    secondary: {\r\n      main: \"#19857b\",\r\n    },\r\n    error: {\r\n      main: red.A400,\r\n    },\r\n    background: {\r\n      default: \"#fff\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;","import React, {useState} from \"react\";\r\nimport {TextField, Button, FormControlLabel, Radio, Grid, Container} from \"@material-ui/core\"\r\n\r\n\r\nconst OrderString = () => {\r\n\r\n    const [ordering, setOrder] = useState(0);\r\n    const [currentSelected, setSelected] = useState(\"\");\r\n    const [currentInput, setInput] = useState(\"\");\r\n\r\n    const chooseString = () => {     \r\n        if (currentInput.replace(/\\n/gi,\"\").replace(/ /gi,\"\") !== \"\" ) {\r\n            var stringsToChoose = (currentInput.replace(/\\n/gi,\" \").trim().split(/[ ]+/));\r\n            var setOfStrings = new Set(stringsToChoose);\r\n            stringsToChoose = Array.from(setOfStrings)\r\n            if (ordering == 0) {\r\n                stringsToChoose.sort();\r\n            }\r\n            else if (ordering == 1) {\r\n                stringsToChoose.sort();\r\n                stringsToChoose.reverse();\r\n            }\r\n            else {\r\n                stringsToChoose.sort((a,b) => {return a.length - b.length});\r\n            }\r\n            var outputString = \"\\n\";\r\n            var i = 0;\r\n            for (i = 0; i < stringsToChoose.length - 1; ++i) {\r\n                outputString = outputString.concat((i + 1) + \". \");\r\n                outputString = outputString.concat(stringsToChoose[i]).concat(\"\\n\");\r\n            }\r\n            outputString = outputString.concat((stringsToChoose.length) + \". \").concat(stringsToChoose[stringsToChoose.length - 1]);\r\n            setSelected(outputString);\r\n        }\r\n    }\r\n\r\n    const clear = () => {\r\n        setInput(\"\");\r\n        setSelected(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container maxWidth={'xs'}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs = {12}>\r\n                        <div>\r\n                            This application takes in a list of strings and outputs an ordered version.\r\n                            Strings may be split by spaces or newlines.\r\n                            The ordered output only contains unique values.\r\n                            The ordering can be selected between alphabetical ascending, alphabetical descending, and increasing string length.\r\n                        </div>\r\n                        <br>\r\n                        </br>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            label=\"Input\"\r\n                            value={currentInput}\r\n                            onChange={(event) => {setInput(event.target.value)}}\r\n                            multiline=\"true\"\r\n                            rowsMax={5}/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div>\r\n                            <TextField\r\n                                value={currentSelected}\r\n                                label=\"Output\"\r\n                                multiline=\"true\"\r\n                                InputProps={{\r\n                                    readOnly: true,\r\n                                }}\r\n                            variant=\"filled\"\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div>Ordering:</div>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel value={0} control={<Radio />} label=\"Ascending\" checked={ordering == 0} onChange={(event) => {setOrder(event.target.value)}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel value={1} control={<Radio />} label=\"Descending\" checked={ordering == 1} onChange={(event) => {setOrder(event.target.value)}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <FormControlLabel value={2} control={<Radio />} label=\"Increasing string length\" checked={ordering == 2} onChange={(event) => {setOrder(event.target.value)}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button onClick={chooseString} variant=\"outlined\">Order Input Strings</Button>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button onClick={clear} variant=\"outlined\">Clear Input and Output</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default OrderString;","\nimport './App.css';\nimport CssBaseline from \"@material-ui/core/Cssbaseline\"\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport theme from \"./theme\"\nimport OrderString from \"./OrderString\"\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <OrderString />\n  </ThemeProvider>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}